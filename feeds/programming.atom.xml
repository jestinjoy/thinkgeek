<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My Blog</title><link href="http://blog.jestinjoy.info/" rel="alternate"></link><link href="http://blog.jestinjoy.info/feeds/programming.atom.xml" rel="self"></link><id>http://blog.jestinjoy.info/</id><updated>2014-02-20T20:15:00+05:30</updated><entry><title>Performance of Python and Julia for sorting</title><link href="http://blog.jestinjoy.info/performance-of-python-and-julia-for-sorting.html" rel="alternate"></link><updated>2014-02-20T20:15:00+05:30</updated><author><name>Jestin Joy</name></author><id>tag:blog.jestinjoy.info,2014-02-20:performance-of-python-and-julia-for-sorting.html</id><summary type="html">&lt;p&gt;With &lt;a class="reference external" href="http://www.wired.com/wiredenterprise/2014/02/julia/"&gt;Wired&lt;/a&gt; terming it is as &amp;quot;a new language they hope will be suited to practically any task. &amp;quot;, thought of giving it a try. One major feature emphasized about Julia was its speed. So run sorting on 1,00,000 numbers using both Julia and Python. What I have done is&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run inbuilt sorting methods of Julia and Python on large set of numbers&lt;/li&gt;
&lt;li&gt;Run custom sorting method (insertion sort based on &lt;a class="reference external" href="http://www.cs.bell-labs.com/cm/cs/pearls/"&gt;programming pearls book&lt;/a&gt;) using Julia and Python&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Julia completed sorting faster than Python for inbuilt and custom versions.  &lt;a class="reference external" href="http://julialang.org/"&gt;This is expected&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have used matplotlib to plot the result.&lt;/p&gt;
&lt;p&gt;Using built-in sort method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="" src="images/builtin.png" style="width: 10.0px; height: 10.0px;" /&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using custom sort method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="" src="images/custom.png" style="width: 1.5px; height: 1.5px;" /&gt;
&lt;/blockquote&gt;
</summary><category term="python"></category><category term="pelican"></category><category term="sorting"></category><category term="performance"></category></entry></feed>